import os

## Tickets & Libraries for analysis
library = config["library"]

## Tree cut params
RES_CUT = config["resolution_graph_cut"]
DATATAG = config["datatag"]
default_mem=20

rule all:
    resources:
        h_vmem = default_mem
    """
    Launches full snakemake pipeline, cleans up junk files at the end.
    """
    input:
        os.path.join(config['results_dir'], 'tree_viz_dream', 'trajectory_clone_wholedata.png')
        
      
  
rule convert_newick_to_graphml:
    """
    Convert newick tree format to tree graphml format, so python igraph can read tree
    """
    input:
        os.path.join(config['results_dir'], 'tree.newick')
    output:
        os.path.join(config['results_dir'], 'graph_cut','tree.graphml')
    resources:
        h_vmem=default_mem
    shell:
        'Rscript {config[project_dir]}/src/tree_cut/convert_newick_to_graphml.R -i {input} -o {output}' 
        
rule leiden_graph_cut:
    """
    Get cell clone labels using Leiden graph cut algorithm
    """
    input:
        os.path.join(config['results_dir'], 'graph_cut','tree.graphml')
    output:
        os.path.join(config['results_dir'], 'cell_clones.csv')
    shell:
        'python {config[project_dir]}/src/tree_cut/graph_cut.py --input_file {input} --resolution {RES_CUT} --output_file {output}'
         
rule create_grouping_file:
    """
    create a grouping file for heatmap annotation
    """
    params:
        library_ids = ",".join(list(library.keys())),
        groupings = ",".join(list(config['library'][library_id]['grouping'] for library_id in library.keys())),
        mainsites = ",".join(list(config['library'][library_id]['mainsite'] for library_id in library.keys())),
        origins = ",".join(list(config['library'][library_id]['origin'] for library_id in library.keys())),
        pdxids = ",".join(list(config['library'][library_id]['pdxid'] for library_id in library.keys()))
    output:
        os.path.join(config['results_dir'], 'library_groupings.csv')
    resources:
        h_vmem=default_mem
    shell:
        'python {config[project_dir]}/src/tree_viz/misc/library_grouping_metastasis.py --library_ids {params.library_ids} --groupings {params.groupings} --mainsites {params.mainsites} --pdxids {params.pdxids} --origin {params.origins} -o {output}'


 
rule cell_cn_tree_viz:
    """
    Tyler's visualization scripts, which includes library/grouping annotation
    """
    input:
        tree = os.path.join(config['results_dir'], 'tree.newick'),
        filtered_cnv_data = os.path.join(config['results_dir'], 'total_merged_filtered_states.csv'),
        grouping_file = os.path.join(config['results_dir'], 'library_groupings.csv'),
        cell_clones = os.path.join(config['results_dir'], 'cell_clones.csv')
    output:
        os.path.join(config['results_dir'], 'cell_cn_tree_heatmap.png')
    resources:
        h_vmem=default_mem
    shell:
        'Rscript {config[project_dir]}/src/tree_viz/make_cell_copynumber_tree_heatmap.R -t {input.tree} -cn {input.filtered_cnv_data} -c {input.cell_clones} --grouping_file {input.grouping_file} -o {output}'
        

rule tree_viz:
    """
    visualize tree; heatmap and tree side by side
    """
    input:
        tree = os.path.join(config['results_dir'], 'tree.newick'),
        filtered_cnv_data = os.path.join(config['results_dir'], 'total_merged_filtered_states.csv'),
        cell_clones = os.path.join(config['results_dir'], 'cell_clones.csv')
    output:
        os.path.join(config['results_dir'], 'corrupt_tree_heatmap.png')
    resources:
        h_vmem=default_mem
    shell:
        'Rscript {config[project_dir]}/src/tree_viz/tree_viz.R -t {input.tree} -n {input.filtered_cnv_data} -c {input.cell_clones} -o {output}'
        
        
rule cell_cn_tree_viz_sorting:
    """
    Tyler's visualization scripts, sorting by origin, mainsite, pdx
    """
    input:
        outdir = os.path.join(config['results_dir']),
        tree = os.path.join(config['results_dir'], 'tree.newick'),
        filtered_cnv_data = os.path.join(config['results_dir'], 'total_merged_filtered_states.csv'),
        grouping_file = os.path.join(config['results_dir'], 'library_groupings.csv'),
        cell_clones = os.path.join(config['results_dir'], 'cell_clones.csv')
    output:
        os.path.join(config['results_dir'], 'heatmap','hm_clone_id.png')
    resources:
        h_vmem=default_mem
    shell:
        'Rscript {config[project_dir]}/src/testing_only/make_cell_copynumber_tree_heatmap.R -t {input.tree} -cn {input.filtered_cnv_data} -c {input.cell_clones} --grouping_file {input.grouping_file} -od {input.outdir} -o {output} --datatag {DATATAG}'
        
        
if config["ebola_trajectory"]:        
    rule ebola_trajectory:
        """
        Generate ebola plot for this series
        """
        params:
            input_dir = config['results_dir'],
            cellclones = os.path.join(config['results_dir'], 'cell_clones.csv')
        output:
            os.path.join(config['results_dir'], 'tree_viz_dream', 'trajectory_clone_wholedata.png')
        shell:
            'Rscript {config[project_dir]}/src/tree_viz/run_ebola_tree.R -i {params.input_dir} -o {output} -d {DATATAG} -c {params.cellclones}'
    

if config["dream_tree"]:        
    rule dream_tree_viz:
        """
        Generate dream tree plot for this series
        """
        params:
            input_dir = config['results_dir'],
            cellclones = os.path.join(config['results_dir'], 'cell_clones.csv')
        output:
            os.path.join(config['results_dir'], 'dream_tree', 'plots_dream_tree.rds')
        shell:
            'Rscript {config[project_dir]}/src/tree_viz/run_dream_tree.R -i {params.input_dir} -o {output} -d {DATATAG} -c {params.cellclones}'



if config["prevalence_plot"]:        
    rule prevalence_plot:
        """
        Generate prevalence_plot for this series
        """
        params:
            input_dir = config['results_dir']
        input:
            os.path.join(config['results_dir'], 'cell_clones.csv')
        output:
            os.path.join(config['results_dir'], 'prevalences', 'clones_prevalence.csv')
        shell:
            'Rscript {config[project_dir]}/src/stat/prevalence_plots.R -i {params.input_dir} -o {output} -d {DATATAG} -c {input}'
    
