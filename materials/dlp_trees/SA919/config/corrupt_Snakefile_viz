import os

## Tickets & Libraries for analysis
library = config["library"]

## Corrupt tree params
SAVESTANDARDSTREAMS = config["saveStandardStreams"]
RECORDGITINFO = config["recordGitInfo"]
MANAGEDEXECUTIONFOLDER = config["managedExecutionFolder"]
NEIGHBORHOODSIZE = config["neighborhoodSize"]
LOWERFRACTION = config["lowerFraction"]
GLOBALPARAMETERIZATION = config["globalParameterization"]
FPRBOUND = config["fprBound"]
FNRBOUND = config["fnrBound"]
ENGINE = config["engine"]
INITIALIZATION = config["initialization"]
LADDER = config["ladder"]
NSCANS = config["nScans"]
NPASSESPERSCAN = config["nPassesPerScan"]
NCHAINS = config["nChains"]
NTHREADS = config["nThreads"]
NTHREADSNUMBER = config["nThreadsNumber"]
POSTPROCESSOR = config["postprocessor"]
LOGISTICTRANSFORM = config["logisticTransform"]
SIZEVAL = config["size_val"]
THINNINGPERIOD = config["thinningPeriod"]
SIZESHAPE = config["size_shape"]
PHYLO = config["phylo"]
READONLYMATRIX = config["read_only_matrix"]
CG_FPRATE = config["corrupt_grow_fpRate"]
CG_FNRATE = config["corrupt_grow_fnRate"]

## Tree cut params
MIN_FRAC = config["minimum_fraction"]
MAX_FRAC = config["maximum_fraction"]
RES_CUT = config["resolution_graph_cut"]
default_mem=30



rule all:
    resources:
        h_vmem = default_mem
    """
    Launches full snakemake pipeline, cleans up junk files at the end.
    """
    input:
        os.path.join(config['results_dir'],'cell_cn_tree_heatmap.png')
 


rule convert_newick_to_graphml:
    """
    Convert newick tree format to tree graphml format, so python igraph can read tree
    """
    input:
        os.path.join(config['results_dir'],'tree.newick')
    output:
        os.path.join(config['results_dir'], 'graph_cut','tree.graphml')
    resources:
        h_vmem=default_mem
    shell:
        'Rscript {config[project_dir]}/src/tree_cut/convert_newick_to_graphml.R -i {input} -o {output}'    
        
        
rule leiden_graph_cut:
    """
    Get cell clone labels using Leiden graph cut algorithm
    """
    input:
        os.path.join(config['results_dir'], 'graph_cut','tree.graphml')
    output:
        os.path.join(config['results_dir'], 'cell_clones.csv')
    shell:
        'python {config[project_dir]}/src/tree_cut/graph_cut.py --input_file {input} --resolution {RES_CUT} --output_file {output}'
    


        
rule cell_cn_tree_viz:
    """
    Tyler's visualization scripts, which includes library/grouping annotation
    """
    input:
        tree = os.path.join(config['results_dir'],'tree.newick'),
        filtered_cnv_data = os.path.join(config['results_dir'], 'total_merged_filtered_states.csv'),
        grouping_file = os.path.join(config['results_dir'], 'library_groupings.csv'),
        cell_clones = os.path.join(config['results_dir'], 'cell_clones.csv')
    output:
        os.path.join(config['results_dir'], 'cell_cn_tree_heatmap.png')
    resources:
        h_vmem=default_mem
    shell:
        'Rscript {config[project_dir]}/src/tree_viz/make_cell_copynumber_tree_heatmap.R -t {input.tree} -cn {input.filtered_cnv_data} -c {input.cell_clones} --grouping_file {input.grouping_file} -o {output}'

